<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rinfon Chan&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-15T13:11:45.338Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Rinfon Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 项目架构之 MVP</title>
    <link href="http://yoursite.com/2019/01/15/Android%20%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84%E4%B9%8B%20MVP/"/>
    <id>http://yoursite.com/2019/01/15/Android 项目架构之 MVP/</id>
    <published>2019-01-15T13:11:45.337Z</published>
    <updated>2019-01-15T13:11:45.338Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>本文不是学术文字讨论（复制粘贴）文，所以不会详细解释什么叫 MVP，MVC，Dagger，Clean 等等。主要以实际项目为基础，简单的实现登录功能。</p><p>当代码量越来越大，需要对已有的代码进行整理以及重构，实现解耦.</p><p><strong>无论任何的架构模式以及设计模式都是为了代码解耦</strong></p><h2 id="研究方向"><a href="#研究方向" class="headerlink" title="研究方向"></a>研究方向</h2><p>MVP 模式：<br><a id="more"></a></p><ul><li>Model:<br>数据层，主要负责网络数据请求与获取，数据库的处理等等数据相关的逻辑处理</li><li>View:<br>视图层，显示数据，例如 Activity,Fragment,View 等等 UI 载体</li><li>Presenter:<br>代理层, View 逻辑处理的集合，并且将 Model 获取的数据返回给 View 层</li></ul><p>MVP 类型</p><ul><li>MVP 简单版</li><li>MVP-Clean<br>主要参考实现 <a href="https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="noopener">Clean Architecture.</a></li><li>MVP-Dagger<br><a href="https://google.github.io/dagger/" target="_blank" rel="noopener">Dragger2 的 MVP 实现</a></li><li>MVP-RxJava<br><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava 的 MVP</a></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="MVP-的简单实现"><a href="#MVP-的简单实现" class="headerlink" title="MVP 的简单实现"></a>MVP 的简单实现</h3><h4 id="逻辑图"><a href="#逻辑图" class="headerlink" title="逻辑图"></a>逻辑图</h4><p><img src="https://i.imgur.com/IBkDUJ6.png" alt="mvp.png"></p><ul><li>View<br>UI 的展示</li><li>BasePresenterImpl<br>封装了 View 的处理流程，数据回调等等，例如进行网络请求的时候，loading 的显示与隐藏。</li><li>LoginPresenter<br>登录逻辑处理的地方</li><li>BaseRespository<br>封装了异常处理，例如网络请求回调的时候，页面消失了，这时候再进行 ui 处理的话就会奔溃。<br>为了不每个页面都加上判空处理，所以就封装了一层。如不需要可以去掉这一层</li><li>LoginRespository<br>登录真正执行的地方</li></ul><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><p> <strong>MainActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">IBaseView</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">         LoginPresenter loginPresenter;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">             setContentView(R.layout.activity_main);</span><br><span class="line">             loginPresenter = <span class="keyword">new</span> LoginPresenter(<span class="keyword">this</span>);</span><br><span class="line">             loginPresenter.toLogin(<span class="string">"111"</span>, <span class="string">"111"</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             loginPresenter.unBind();</span><br><span class="line">             <span class="keyword">super</span>.onDestroy();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(String Result)</span> </span>&#123;</span><br><span class="line">             Log.i(<span class="string">"MainActivity"</span>, Result);</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailed</span><span class="params">(ErrorCode errorCode)</span> </span>&#123;</span><br><span class="line">             Log.i(<span class="string">"MainActivity"</span>, errorCode.getMessage());</span><br><span class="line">             String msg = <span class="keyword">null</span>;</span><br><span class="line">             msg.toLowerCase();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showProgress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             Log.i(<span class="string">"MainActivity"</span>, <span class="string">"loading"</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hideProgress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             Log.i(<span class="string">"MainActivity"</span>, <span class="string">"hide loading"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p><strong>LoginPresenter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginPresenter</span> <span class="keyword">extends</span> <span class="title">BasePresenterImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        IBaseRepository baseRepository;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">LoginPresenter</span><span class="params">(IBaseView mView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(mView);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toLogin</span><span class="params">(String uid, String password)</span> </span>&#123;</span><br><span class="line">            mView.showProgress();</span><br><span class="line">            baseRepository = LoginRepository.Builder(baseCallback)</span><br><span class="line">                .setUid(uid).setPassword(password);</span><br><span class="line">            baseRepository.Action();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>LoginRepository.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRepository</span> <span class="keyword">extends</span> <span class="title">BaseRepository</span> <span class="keyword">implements</span> <span class="title">IBaseRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">private</span> String uid;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoginRepository <span class="title">Builder</span><span class="params">(BaseInteractor.Callback callback)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">new</span> LoginRepository(callback);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> uid;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> LoginRepository <span class="title">setUid</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.uid = uid;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> password;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> LoginRepository <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">this</span>.password = password;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="title">LoginRepository</span><span class="params">(BaseInteractor.Callback callback)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">super</span>(callback);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//        TODO</span></span><br><span class="line">     <span class="comment">//        网络请求</span></span><br><span class="line">     <span class="comment">//        onRequsetSuccess("login success");</span></span><br><span class="line"></span><br><span class="line">             onRequestFailed(<span class="keyword">new</span> ErrorCode().setStatus(<span class="number">0</span>).setMessage(<span class="string">"login fail"</span>));</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Cancel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//        TODO</span></span><br><span class="line">     <span class="comment">//        取消网络请求</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//        回调上一次进行异常处理</span></span><br><span class="line">             onCancel();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p> <strong>完整代码已经上传到github上去了 -&gt; <a href="https://github.com/rinfon/mvp.git" target="_blank" rel="noopener">https://github.com/rinfon/mvp.git</a></strong></p><h3 id="MVP-Clean"><a href="#MVP-Clean" class="headerlink" title="MVP-Clean"></a>MVP-Clean</h3><h4 id="逻辑图-1"><a href="#逻辑图-1" class="headerlink" title="逻辑图"></a>逻辑图</h4><ul><li>Clean 架构图<br><img src="https://i.imgur.com/WgwIlg5.png" alt="195193-73c5ad459c2199c2.png"></li><li>时序图<br><img src="https://i.imgur.com/bDhfdeD.png" alt="195193-3db604de6c4b0137.png"><br>就像这篇文章<a href="https://www.jianshu.com/p/7ae3095f2cb5" target="_blank" rel="noopener">Android 官方架构项目之 MVP + Clean 所说</a>，clean 架构比简单版的 MVP 就是多了一层 Domain 层，减轻 Presenter 的负担。</li></ul><h4 id="关键代码-1"><a href="#关键代码-1" class="headerlink" title="关键代码"></a>关键代码</h4><p> 在研究官方的<a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp-clean/" target="_blank" rel="noopener">Demo</a>中，有些地方还是值得斟酌的</p><ul><li>View 层不通用，例如有些 loading，onSuccess，onError 等通用函数应该抽象到 BaseView 里面去，减少代码量</li><li>所有的 Task 都在一开始就在界面初始化好了，如果有些功能我没有用到，那么就浪费资源了，应该改成需要用到的时候再初始化</li><li>在 presenter 初始化的时候，View 层传的参数太多了。例如 View 层所有的 task 都要初始化好传进去。个人认为这是不科学的。但后来想官方这样写的原因是为了区分 View 与 Presenter 的职责（看来我还是太年轻了），View 作为数据的提供者，Presenter 作为数据的接受者。所以才不在 Presenter 层新建数据。既然如此，那只需要 Builder 模式就可以解决参数过多的问题了。</li><li>Presenter 层 callback 重复代码过多，例如</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mUseCaseHandler.execute(loginTask, <span class="keyword">new</span> LoginTask.LoginRequestValues(uid, password),</span><br><span class="line">                                <span class="keyword">new</span> UseCase.UseCaseCallback&lt;BaseResponseValues&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(BaseResponseValues response)</span> </span>&#123;</span><br><span class="line">                    mView.closeLoading();</span><br><span class="line">                    mView.onSuccess(response);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    mView.closeLoading();</span><br><span class="line">                    mView.onFail();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure><p>每次 excute 都需要提供一个 callback，而每个 callback 仅仅 response 的类型不一样而已。流程还是一样的。所以重复代码还是很多。</p><p>原本想在 UserCaseHandler 里面增加 View 的持有，从而在 UserCaseHandler 进行 CallBack 的时候把 closeloading 和 onSucces，onFail 都写好，这样就可以解决问题了。</p><p><strong>这样的设计方案有个弊端，View 层入侵了 UserCaseHandler，耦合度又增加了。所以看实际需求来权衡吧</strong></p><p>来来来，上代码</p><p><strong>MvpCleanActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvpCleanActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LoginContract</span>.<span class="title">View</span>&lt;<span class="title">BaseResponseValues</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">            CleanLoginPresenter loginPresenter;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">                setContentView(R.layout.activity_main);</span><br><span class="line">                loginPresenter = <span class="keyword">new</span> CleanLoginPresenter(<span class="keyword">this</span>, UseCaseHandler.getInstance(), <span class="keyword">new</span> LoginTask());</span><br><span class="line">                loginPresenter.login(<span class="string">"111"</span>, <span class="string">"111"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onDestroy();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"MvpCleanActivity"</span>, <span class="string">"showloading"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"MvpCleanActivity"</span>, <span class="string">"closeloading"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(BaseResponseValues r)</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"MvpCleanActivity"</span>, r.getResult().getMessage());</span><br><span class="line">        <span class="comment">//        will crash</span></span><br><span class="line">                String msg = <span class="keyword">null</span>;</span><br><span class="line">                msg.toLowerCase();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.i(<span class="string">"MvpCleanActivity"</span>, <span class="string">"login fail"</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p><strong>CleanLoginPresenter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CleanLoginPresenter</span> <span class="keyword">implements</span> <span class="title">LoginContract</span>.<span class="title">Presenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> LoginContract.View mView;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> UseCaseHandler mUseCaseHandler;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">final</span> LoginTask loginTask;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">CleanLoginPresenter</span><span class="params">(LoginContract.View mView, UseCaseHandler mUseCaseHandler, LoginTask loginTask)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//        TODO 参数过多，使用 builder 模式</span></span><br><span class="line">                <span class="keyword">this</span>.mView = mView;</span><br><span class="line">                <span class="keyword">this</span>.mUseCaseHandler = mUseCaseHandler;</span><br><span class="line">                <span class="keyword">this</span>.loginTask = loginTask;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String uid, String password)</span> </span>&#123;</span><br><span class="line">                mView.showLoading();</span><br><span class="line">                mUseCaseHandler.execute(loginTask, <span class="keyword">new</span> LoginTask.LoginRequestValues(uid, password),</span><br><span class="line">                        <span class="keyword">new</span> UseCase.UseCaseCallback&lt;BaseResponseValues&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(BaseResponseValues response)</span> </span>&#123;</span><br><span class="line">                                mView.closeLoading();</span><br><span class="line">                                mView.onSuccess(response);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                mView.closeLoading();</span><br><span class="line">                                mView.onFail();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p><strong>LoginTask.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginTask</span> <span class="keyword">extends</span> <span class="title">UseCase</span>&lt;<span class="title">LoginTask</span>.<span class="title">LoginRequestValues</span>, <span class="title">BaseResponseValues</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeUseCase</span><span class="params">(LoginRequestValues requestValues)</span> </span>&#123;</span><br><span class="line">                 <span class="comment">//        TODO 网络请求</span></span><br><span class="line"></span><br><span class="line">                 <span class="comment">//        回调</span></span><br><span class="line">                 getUseCaseCallback().onSuccess(<span class="keyword">new</span> BaseResponseValues(</span><br><span class="line">                                                                       ResponseEntry</span><br><span class="line">                                                                       .Builder()</span><br><span class="line">                                                                       .setStatus(<span class="number">1</span>)</span><br><span class="line">                                                                       .setMessage(<span class="string">"Login success"</span>)));</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginRequestValues</span> <span class="keyword">extends</span> <span class="title">BaseRequsetValues</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                 <span class="function"><span class="keyword">public</span> <span class="title">LoginRequestValues</span><span class="params">(@NonNull String uid, @NonNull String password)</span> </span>&#123;</span><br><span class="line">                     <span class="keyword">super</span>(<span class="keyword">new</span> HashMap&lt;String, String&gt;());</span><br><span class="line">                     uid = checkNotNull(uid, <span class="string">"task cannot be null!"</span>);</span><br><span class="line">                     password = checkNotNull(password, <span class="string">"task cannot be null!"</span>);</span><br><span class="line">                     getParmas().put(<span class="string">"uid"</span>, uid);</span><br><span class="line">                     getParmas().put(<span class="string">"password"</span>, password);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p> LoginTask 里面跟官方还是不一样的，因为实际需求中，请求的参数和返回的结果结构大多数都是一样的，所以 RequestValues 和 ResponseValues 还是可以封装成公用的。</p><p><strong>LoginContract.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginContract</span> </span>&#123;</span><br><span class="line">             <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">View</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">                 <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">                 <span class="function"><span class="keyword">void</span> <span class="title">closeLoading</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">                 <span class="function"><span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(T Result)</span></span>;</span><br><span class="line"></span><br><span class="line">                 <span class="function"><span class="keyword">void</span> <span class="title">onFail</span><span class="params">()</span></span>;</span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">             <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> </span>&#123;</span><br><span class="line">                 <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(String uid, String password)</span></span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p><strong>就像本文所说，View 层可以再封装成 BaseView，把重复的的代码放进去</strong></p><p><strong>UserCase</strong><br>相关的就不放出来了，官方已经封装好了，实际上就是封装了一个线程池，用于异步处理 Task，所以直接使用即可。<br><strong>完整代码已经上传到 github上去了 -&gt; <a href="https://github.com/rinfon/mvp.git" target="_blank" rel="noopener">https://github.com/rinfon/mvp.git</a></strong></p><h3 id="MVP-Dagger"><a href="#MVP-Dagger" class="headerlink" title="MVP-Dagger"></a>MVP-Dagger</h3><p>  未完待续</p><h3 id="MVP-RxJava"><a href="#MVP-RxJava" class="headerlink" title="MVP-RxJava"></a>MVP-RxJava</h3><p><code>RxJava</code> ，之前我一直很抗拒，因为上手感觉很难，另一部分可能自己心燥，静不下来好好研究。但最近看 MVP-clean 的时候有用到，所以也就铁下心来研究了一下。</p><p>  本来想写篇文章来分享一下的，但后来看到大神们都已经解释的很清楚，连我都能看懂的，我相信你们都能看懂的。</p><p>  附上链接 ，<a href="https://www.jianshu.com/p/464fa025229e" target="_blank" rel="noopener">小水管 RxJava</a> 通过作者的小水管，我相信你们也会喜欢上 RxJava 的。</p><h4 id="回到整体"><a href="#回到整体" class="headerlink" title="回到整体"></a>回到整体</h4><p>  MVP-RxJava，我看了 google 的 demo 之后，发现其实没什么特别的神的地方（应该是没什么出彩的地方），也就是简单版的 MVP 加上 RxJava 而已，所以 demo 就不放出来了。放出关键代码吧</p><p>  <strong>LoginPresenter.Java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mCompositeDisposable.add(Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;User&gt;() &#123;</span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;User&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                      User user = <span class="keyword">new</span> User();</span><br><span class="line">                      user.uid = uid;</span><br><span class="line">                      user.password = password;</span><br><span class="line">                      e.onNext(user);</span><br><span class="line">                      e.onComplete();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;).subscribeOn(mSchedulerProvider.io())</span><br><span class="line">                      .observeOn(mSchedulerProvider.ui())</span><br><span class="line">                      .subscribe(<span class="keyword">new</span> Consumer&lt;User&gt;() &#123;</span><br><span class="line">                          <span class="meta">@Override</span></span><br><span class="line">                          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                              mView.closeLoading();</span><br><span class="line">                              mView.onSuccess(user);</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                          <span class="meta">@Override</span></span><br><span class="line">                          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                              mView.closeLoading();</span><br><span class="line">                              mView.onFail();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;));</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>任何架构设计都是为了解耦，而解耦随之带来的就是代码的增加以及重复</li><li>设计的过程中，要注意各层的职责，尽量可以避免入侵</li><li>在我的 Demo 中，为了处理回调导致的奔溃，我对回调进行了 try catch，这没有问题，但要对详细的异常进行区分，不能所有的异常都吃掉，这是一种不负责的写法（小孩子不要模范啦）有时候，就应该让它 Crash，才知道问题所在。如果非要吃掉所有的异常，也要封装成一个 ErrorCode，对错误信息进行收集。<a href="https://www.zhihu.com/question/29459586" target="_blank" rel="noopener">知乎链接</a>，里面有大牛解释的很清楚了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;本文不是学术文字讨论（复制粘贴）文，所以不会详细解释什么叫 MVP，MVC，Dagger，Clean 等等。主要以实际项目为基础，简单的实现登录功能。&lt;/p&gt;
&lt;p&gt;当代码量越来越大，需要对已有的代码进行整理以及重构，实现解耦.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;无论任何的架构模式以及设计模式都是为了代码解耦&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;研究方向&quot;&gt;&lt;a href=&quot;#研究方向&quot; class=&quot;headerlink&quot; title=&quot;研究方向&quot;&gt;&lt;/a&gt;研究方向&lt;/h2&gt;&lt;p&gt;MVP 模式：&lt;br&gt;
    
    </summary>
    
    
      <category term="MVP" scheme="http://yoursite.com/tags/MVP/"/>
    
      <category term="MVVM" scheme="http://yoursite.com/tags/MVVM/"/>
    
      <category term="Android架构" scheme="http://yoursite.com/tags/Android%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>MWeb 自动发布到 Hexo</title>
    <link href="http://yoursite.com/2019/01/15/MWeb%20%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%88%B0%20Hexo/"/>
    <id>http://yoursite.com/2019/01/15/MWeb 自动发布到 Hexo/</id>
    <published>2019-01-15T13:06:36.781Z</published>
    <updated>2019-01-15T13:06:36.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>之前一直在寻找一个合适的方式来记录工作的日常，例如问题记录、方案计划等等。但一直没有找到一直适合自己的工作流程。主要还是卡在<code>记录</code>这一步骤。</p><blockquote><p>记录。记什么、记在哪里、怎么记。</p></blockquote><p>为了解决记录问题，我尝试过<code>Eventnote</code>、<code>便签</code>、<code>手写笔记本</code>等等。最后发现都因为各种各样的原因让我放弃了。</p><p><code>Eventnote</code>的编辑器、<code>便签</code>的同步问题、<code>手机笔记本</code>的搜索问题都在阻碍着我记录<br><a id="more"></a></p><p>个人认为一个良好的工作流程应该如下：</p><ol><li>接收到需求</li><li>计划</li><li>实施</li><li>记录</li><li>归档</li></ol><p>配合<code>Alfred</code>实现以下功能</p><ul><li style="list-style: none"><input type="checkbox"> <del>新建文章</del></li><li style="list-style: none"><input type="checkbox" checked> 查询文章</li><li style="list-style: none"><input type="checkbox" checked> 增加Tag功能</li><li style="list-style: none"><input type="checkbox" checked> 自动发布到某篇文章到Hexo</li></ul><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a><del>新建文章</del></h2><h2 id="查询文章"><a href="#查询文章" class="headerlink" title="查询文章"></a>查询文章</h2><h2 id="增加Tag功能"><a href="#增加Tag功能" class="headerlink" title="增加Tag功能"></a>增加Tag功能</h2><h2 id="自动发布某篇文章到Hexo"><a href="#自动发布某篇文章到Hexo" class="headerlink" title="自动发布某篇文章到Hexo"></a>自动发布某篇文章到Hexo</h2><ul><li>title问题</li><li>tag问题<br>  数据库查询</li><li>关联mweb hexo问题<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2></li><li>alfred 执行git、hexo命令找不到问题</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;之前一直在寻找一个合适的方式来记录工作的日常，例如问题记录、方案计划等等。但一直没有找到一直适合自己的工作流程。主要还是卡在&lt;code&gt;记录&lt;/code&gt;这一步骤。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;记录。记什么、记在哪里、怎么记。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了解决记录问题，我尝试过&lt;code&gt;Eventnote&lt;/code&gt;、&lt;code&gt;便签&lt;/code&gt;、&lt;code&gt;手写笔记本&lt;/code&gt;等等。最后发现都因为各种各样的原因让我放弃了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Eventnote&lt;/code&gt;的编辑器、&lt;code&gt;便签&lt;/code&gt;的同步问题、&lt;code&gt;手机笔记本&lt;/code&gt;的搜索问题都在阻碍着我记录&lt;br&gt;
    
    </summary>
    
    
      <category term="我" scheme="http://yoursite.com/tags/%E6%88%91/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="新增的tag" scheme="http://yoursite.com/tags/%E6%96%B0%E5%A2%9E%E7%9A%84tag/"/>
    
  </entry>
  
  <entry>
    <title>android studio Jar 包制作以及混淆</title>
    <link href="http://yoursite.com/2019/01/12/2019-01-12-android%20studio%20Jar%20%E5%8C%85%E5%88%B6%E4%BD%9C%E4%BB%A5%E5%8F%8A%E6%B7%B7%E6%B7%86/"/>
    <id>http://yoursite.com/2019/01/12/2019-01-12-android studio Jar 包制作以及混淆/</id>
    <published>2019-01-12T03:02:26.000Z</published>
    <updated>2019-01-12T03:08:13.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>  项目越来越大，需要对核心代码进行封装加密管理</p><a id="more"></a><h3 id="Jar-包制作"><a href="#Jar-包制作" class="headerlink" title="Jar 包制作"></a>Jar 包制作</h3><ul><li>优点：简单，方便</li><li>缺点：不能把资源文件都打进去 Jar 包里面，例如图片，布局文件等等</li></ul><h3 id="aar-制作"><a href="#aar-制作" class="headerlink" title="aar 制作"></a>aar 制作</h3><ul><li>优点：跟 Jar 一样，可以把资源文件都打包进去，AS可以直接引用，管理方便</li><li>缺点：-</li></ul><h3 id="so-制作"><a href="#so-制作" class="headerlink" title="so 制作"></a>so 制作</h3><ul><li>优点：增加反编译难度，核定代码可以放进去</li><li>缺点：需要 C/C++基础，并不是所有都适合放到 so 里面去。</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="制作"><a href="#制作" class="headerlink" title="制作"></a>制作</h3><ul><li>新建一个 module，选择 Android Library</li><li>Finish</li><li>把你需要封装的代码写在 module 里面去</li></ul><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><ul><li>在 module 里面的 build.gradle 文件加入一下 Task</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">task <span class="title">buildJar</span><span class="params">(type: Jar, dependsOn: [<span class="string">'compileReleaseJavaWithJavac'</span>])</span> </span>&#123; <span class="comment">//  task buildJar(type: Jar, dependsOn: ['build'])</span></span><br><span class="line"><span class="comment">//    导出的 jar 文件的名称</span></span><br><span class="line">    archiveName = <span class="string">"testJar-debug.jar"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//需打包的资源所在的路径集</span></span><br><span class="line">    from(<span class="string">'build/intermediates/classes/release'</span>)</span><br><span class="line">    destinationDir = file(<span class="string">'../libs'</span>)  <span class="comment">// //导出的 jar 文件的存放目录（未指定则默认存放在 build/libs 下）  destinationDir = file('D:/libs')</span></span><br><span class="line"></span><br><span class="line">    exclude <span class="string">"**/BuildConfig.class"</span>  <span class="comment">//去掉不要的类</span></span><br><span class="line">    exclude(<span class="string">'**/R.class'</span>)</span><br><span class="line">    exclude(<span class="string">'**/R\$*.class'</span>)</span><br><span class="line">    include <span class="string">"**/*.*"</span>    <span class="comment">//需要打包的类 如 // include('com/reginer/mytest/*.class')</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">task <span class="title">proguardJar</span><span class="params">(dependsOn: [<span class="string">'buildJar'</span>], type: ProGuardTask)</span> </span>&#123;</span><br><span class="line">    println(<span class="string">'proguard '</span>+project.name+<span class="string">' jar'</span>)</span><br><span class="line">    <span class="comment">//Android 默认的 proguard 文件</span></span><br><span class="line">    configuration android.getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>)</span><br><span class="line">    <span class="comment">//加载各模块 proguard 配置文件</span></span><br><span class="line">    configuration <span class="string">'proguard-rules.pro'</span></span><br><span class="line"></span><br><span class="line">    String inJar = buildJar.archivePath.getAbsolutePath()</span><br><span class="line">    injars inJar</span><br><span class="line">    outjars inJar.substring(<span class="number">0</span>, inJar.lastIndexOf(<span class="string">'-'</span>)) + <span class="string">"-release.jar"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置不删除未引用的资源(类，方法等)</span></span><br><span class="line">    dontshrink</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行时 jar 包不混淆</span></span><br><span class="line">    Plugin plugin = getPlugins().hasPlugin(AppPlugin) ?</span><br><span class="line">            getPlugins().findPlugin(AppPlugin) :</span><br><span class="line">            getPlugins().findPlugin(LibraryPlugin)</span><br><span class="line">    <span class="keyword">if</span> (plugin != <span class="keyword">null</span>) &#123;</span><br><span class="line">        List&lt;String&gt; runtimeJarList</span><br><span class="line">        <span class="keyword">if</span> (plugin.getMetaClass().getMetaMethod(<span class="string">"getRuntimeJarList"</span>)) &#123;</span><br><span class="line">            runtimeJarList = plugin.getRuntimeJarList()</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (android.getMetaClass().getMetaMethod(<span class="string">"getBootClasspath"</span>)) &#123;</span><br><span class="line">            runtimeJarList = android.getBootClasspath()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            runtimeJarList = plugin.getBootClasspath()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String runtimeJar : runtimeJarList) &#123;</span><br><span class="line">            libraryjars(runtimeJar)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>打开 Gradle 任务，执行 buildJar</p></li><li><p>然后再执行 proguardJar 任务进行混淆</p></li><li><p>最后你会发现在项目中出现 test-relase.jar</p><p><strong>注意buildJar里面archiveName名字必须有-，不然会执行错误的。原因在与在混淆的时候，需要把包名改成 relase.不喜欢的可以自行修改逻辑代码</strong></p><p><strong>注意buildJar里面archiveName名字必须有-，不然会执行错误的。原因在与在混淆的时候，需要把包名改成 relase.不喜欢的可以自行修改逻辑代码</strong></p><p><strong>注意buildJar里面archiveName名字必须有-，不然会执行错误的。原因在与在混淆的时候，需要把包名改成 relase.不喜欢的可以自行修改逻辑代码</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;  项目越来越大，需要对核心代码进行封装加密管理&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>解决 found an invalid color</title>
    <link href="http://yoursite.com/2019/01/11/2019-01-11-%E8%A7%A3%E5%86%B3%20found%20an%20invalid%20color/"/>
    <id>http://yoursite.com/2019/01/11/2019-01-11-解决 found an invalid color/</id>
    <published>2019-01-11T09:01:22.000Z</published>
    <updated>2019-01-11T09:38:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在导入 eclipse 项目的时候，有时候会出现 found an invalid color 这个问题，原因在于 AS 对.9 图片的检查</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p> 图片是.9.png 格式的，但是没有画黑色边框线，需要画上边框线，保存就可以了。或者直接把.9 格式去掉即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;在导入 eclipse 项目的时候，有时候会出现 found an invalid color 这个问题，原因在于 AS 对.9 图片的检查
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>git 的简单介绍</title>
    <link href="http://yoursite.com/2019/01/11/2019-01-11-git%20%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/01/11/2019-01-11-git 的简单介绍/</id>
    <published>2019-01-11T08:02:20.000Z</published>
    <updated>2019-01-11T08:49:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-的简单介绍"><a href="#git-的简单介绍" class="headerlink" title="git 的简单介绍"></a>git 的简单介绍</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么?"></a>是什么?</h2><p>   Git 是目前世界上最先进的分布式版本控制系统。</p><a id="more"></a><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><ul><li>适合分布式开发</li><li>速度快，灵活</li><li>优秀的解决冲突能力</li><li>版本管理</li></ul><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ol><li>克隆项目</li><li>修改项目</li><li>提交更改</li><li>拉取远端最新的更改（如果别人在你修改期间有更改推送过，则需要拉取）</li><li>如本地修改跟远端修改有冲突，则解决冲突</li><li>重新提交</li><li><p>推送远端</p><p>对应流程图如下：<br><img src="https://i.imgur.com/lDyvwV4.png" alt="201609291518243574.png"></p></li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>git init<br>用于初始化项目</li><li>git clone<br>用于克隆项目</li><li>git add<br>添加修改文件。<br>其中 git add .代表添加所有修改过的问题件，git add 文件路径,代表添加特定的文件。</li><li>git commit<br>提交更改日志，例如 git commit -m “增加功能”</li><li>git fetch<br>检查远端是否有更改</li><li>git pull<br>拉取远端的最新的代码，例如 git pull –rebase.<br>rebase 和 merge 的区别在于：merge 操作会生成一个新的节点，之前的提交分开显示。而 rebase 操作不会生成新的节点，是将两个分支融合成一个线性的提交。<br>所以我们通常 git pull 都会加上 rebase 的参数</li><li>git push<br>推送本地更改到服务器,例如 git push orgin master</li><li>git branch<br>查看当前分支,而如果加上-r 参数，代表查看远程分支 git branch -r</li><li>git checkout<br>切换分支 例如，git checkout -b develop，切换到 develop 分支，如果本地已经有 develop 分支，则 git checkout develop</li><li>git tag<br>为节点打日志，例如，我们要为 1b2e1d63ff 打上 1.0 的标签:git tag 1.0 1b2e1d63ff</li><li>git reset<br>丢弃所有的本地所有的更改，git reset HEAD –hard,同时也可以用此命令回到之前的节点，如果我要返回到上一个节点（注意，此返回指的是你本地返回，而不是远端返回），git reset HEAD^ –hard</li><li>git status<br>查看本地缓存修改记录</li></ul><h2 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h2><h3 id="现在有-a、b、c、d、e，5-个提交点，我需要切换回滚到-c-节点，丢弃的-d-e-节点"><a href="#现在有-a、b、c、d、e，5-个提交点，我需要切换回滚到-c-节点，丢弃的-d-e-节点" class="headerlink" title="现在有 a、b、c、d、e，5 个提交点，我需要切换回滚到 c 节点，丢弃的 d,e 节点"></a>现在有 a、b、c、d、e，5 个提交点，我需要切换回滚到 c 节点，丢弃的 d,e 节点</h3><pre><code>git reset HEAD^^ --hard（或者 git reset c 点的 sha 码 --hard）git push origin HEAD --force</code></pre><h3 id="把别的分支某个提交点提交到当前分支"><a href="#把别的分支某个提交点提交到当前分支" class="headerlink" title="把别的分支某个提交点提交到当前分支"></a>把别的分支某个提交点提交到当前分支</h3><p>  例如 develop 上有提交点 a(sha 码为 1b2e1d63ff),需要把 a 也提交到 master 上去.</p><pre><code>git checkout mastergit cherry-pick -x 1b2e1d63ff,-x 代表着保留原始作者信息</code></pre><p>  如果途中产生冲突，则按照标准的解决冲突方法去解决。然后重新 commit 即可</p><h3 id="查找某个文件的某行修改记录"><a href="#查找某个文件的某行修改记录" class="headerlink" title="查找某个文件的某行修改记录"></a>查找某个文件的某行修改记录</h3><p>  新接手了一个项目，里面某一行代码不知道为什么原作者这样写，需要查看对应的提交点记录才能知道为啥当初这样写<br>    例如要查看 a.java 文件的修改记录</p><pre><code>git blame **/a.java(注意文件路径),得到如下结果</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">^<span class="number">5</span>cdd7bd (Rinfon <span class="number">2018</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">13</span>:<span class="number">14</span>:<span class="number">34</span> +<span class="number">0800</span>  <span class="number">68</span>)     LocalTextView apStepBack;</span><br><span class="line">^<span class="number">5</span>cdd7bd (Rinfon <span class="number">2018</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">13</span>:<span class="number">14</span>:<span class="number">34</span> +<span class="number">0800</span>  <span class="number">69</span>)     <span class="meta">@BindView</span>(R.id.ap_step_next)</span><br><span class="line">^<span class="number">5</span>cdd7bd (Rinfon <span class="number">2018</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">13</span>:<span class="number">14</span>:<span class="number">34</span> +<span class="number">0800</span>  <span class="number">70</span>)     LocalTextView apStepNext;</span><br><span class="line"><span class="number">20997902</span> (Rinfon <span class="number">2018</span>-<span class="number">06</span>-<span class="number">25</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">13</span> +<span class="number">0800</span>  <span class="number">71</span>)     <span class="meta">@BindView</span>(R.id.ap_step_three_icon)</span><br><span class="line"><span class="number">20997902</span> (Rinfon <span class="number">2018</span>-<span class="number">06</span>-<span class="number">25</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">13</span> +<span class="number">0800</span>  <span class="number">72</span>)     ImageView apStepThreeIcon;</span><br><span class="line"><span class="number">20997902</span> (Rinfon <span class="number">2018</span>-<span class="number">06</span>-<span class="number">25</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">13</span> +<span class="number">0800</span>  <span class="number">73</span>)     <span class="meta">@BindView</span>(R.id.wifi_remember)</span><br><span class="line"><span class="number">20997902</span> (Rinfon <span class="number">2018</span>-<span class="number">06</span>-<span class="number">25</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">13</span> +<span class="number">0800</span>  <span class="number">74</span>)     CheckBox wifiRemember;</span><br><span class="line"><span class="number">20997902</span> (Rinfon <span class="number">2018</span>-<span class="number">06</span>-<span class="number">25</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">13</span> +<span class="number">0800</span>  <span class="number">75</span>)     <span class="meta">@BindView</span>(R.id.ap_step_btn_layout)</span><br><span class="line"><span class="number">20997902</span> (Rinfon <span class="number">2018</span>-<span class="number">06</span>-<span class="number">25</span> <span class="number">12</span>:<span class="number">03</span>:<span class="number">13</span> +<span class="number">0800</span>  <span class="number">76</span>)     LinearLayout apStepBtnLayout;</span><br><span class="line">^<span class="number">5</span>cdd7bd (Rinfon <span class="number">2018</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">13</span>:<span class="number">14</span>:<span class="number">34</span> +<span class="number">0800</span>  <span class="number">77</span>)     <span class="keyword">private</span> Unbinder unbinder;</span><br></pre></td></tr></table></figure><p>  这时候已经得到了 sha 码，就可以通过 git show 20997902,可以得到修改的信息。</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>主要分支</p><ul><li>master 分支。仅且只有一个主分支，用于提供正式版本</li><li>develop 分支，开发分支，用于日常开发，如果一个版本开发完整，测试通过，则合并到 develop 里面去。合并的时候需要加上 –no-ff，快进式合并，保证版本的演进清晰。<br>临时分支</li><li>feature 分支，当需要做一个新功能时，需要基于 develop 开一个 feature 分支，即使 feature 不完成，也不会影响 develop 的进度.</li><li><p>hotfix 分支，用于修改 bug 的分支，基于 master 分出来的。修改结束后，合并到 master 和 develop 上去</p><p><strong>但这只是一个基础想法，并不是适用于所有的项目的，而我们需要做的，就是对此策略加以修改，变成适合自己的分支管理。</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-的简单介绍&quot;&gt;&lt;a href=&quot;#git-的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;git 的简单介绍&quot;&gt;&lt;/a&gt;git 的简单介绍&lt;/h1&gt;&lt;h2 id=&quot;是什么&quot;&gt;&lt;a href=&quot;#是什么&quot; class=&quot;headerlink&quot; title=&quot;是什么?&quot;&gt;&lt;/a&gt;是什么?&lt;/h2&gt;&lt;p&gt;   Git 是目前世界上最先进的分布式版本控制系统。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
